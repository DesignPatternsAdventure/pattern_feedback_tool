{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pattern_feedback_tool \u2693\ufe0e Design Pattern Feedback Tool Installation \u2693\ufe0e This package is built only for playing the DesignPatternsAdventure/game For developers working on game there are hidden doit tasks to help with development: poetry run doit --continue _format _test _check _check_types _update _build_diagrams Usage \u2693\ufe0e See the README of the game , which utilizes pft \u2018s doit tasks, such as doit check or doit build_diagrams . See tests for example code and output. Project Status \u2693\ufe0e See the Open Issues and/or the CODE_TAG_SUMMARY . For release history, see the CHANGELOG . Contributing \u2693\ufe0e We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation: DEVELOPER_GUIDE STYLE_GUIDE CONTRIBUTING Code of Conduct \u2693\ufe0e We follow the Contributor Covenant Code of Conduct . Responsible Disclosure \u2693\ufe0e If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com . License \u2693\ufe0e LICENSE","title":"pattern_feedback_tool"},{"location":"#pattern_feedback_tool","text":"Design Pattern Feedback Tool","title":"pattern_feedback_tool"},{"location":"#installation","text":"This package is built only for playing the DesignPatternsAdventure/game For developers working on game there are hidden doit tasks to help with development: poetry run doit --continue _format _test _check _check_types _update _build_diagrams","title":"Installation"},{"location":"#usage","text":"See the README of the game , which utilizes pft \u2018s doit tasks, such as doit check or doit build_diagrams . See tests for example code and output.","title":"Usage"},{"location":"#project-status","text":"See the Open Issues and/or the CODE_TAG_SUMMARY . For release history, see the CHANGELOG .","title":"Project Status"},{"location":"#contributing","text":"We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation: DEVELOPER_GUIDE STYLE_GUIDE CONTRIBUTING","title":"Contributing"},{"location":"#code-of-conduct","text":"We follow the Contributor Covenant Code of Conduct .","title":"Code of Conduct"},{"location":"#responsible-disclosure","text":"If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com .","title":"Responsible Disclosure"},{"location":"#license","text":"LICENSE","title":"License"},{"location":"diagrams/mvp-wip/","text":"register keyboard handlers (with precedence?) Basically dictionary of keys, which call sequence of handlers that each can choose if they make some change to the data model class ModelStateInterface TBD - would be nice to have a single source of truth (i.e. SQLite tables?) but easy to reason about or use an alternative class ModelInterface class PresenterInterface model: ModelInterface --- class Settings prefix=\"DPI_\" class ViewInterface model: ModelInterface = default() presenter: PresenterInterface = default() def create() -> None # passes the settings here? class Game def add_view() register_keyhandlers() < TBD need way for these to be defined in the Presenter? Maybe mapping is in View, but callbacks are in presenter? def run() -> None # builder pattern? import package task = TaskWelcome ( class = tbd ) app.register ( task ) app.run () # > ?","title":"Diagrams"},{"location":"diagrams/mvp/","text":"Model View Presenter Design Notes \u2693\ufe0e Concepts \u2693\ufe0e","title":"Model View Presenter Design Notes"},{"location":"diagrams/mvp/#model-view-presenter-design-notes","text":"","title":"Model View Presenter Design Notes"},{"location":"diagrams/mvp/#concepts","text":"","title":"Concepts"},{"location":"docs/CHANGELOG/","text":"0.3.11 (2022-11-12) \u2693\ufe0e Fix \u2693\ufe0e resolve issues and document the hidden tasks 0.3.10 (2022-11-12) \u2693\ufe0e Fix \u2693\ufe0e check length of errors and not just log file 0.3.9 (2022-11-11) \u2693\ufe0e Fix \u2693\ufe0e add missing lxml dependency 0.3.8 (2022-11-10) \u2693\ufe0e Fix \u2693\ufe0e fix incorrect double underscore in private tasks 0.3.7 (2022-11-10) \u2693\ufe0e Fix \u2693\ufe0e return false to error on check errors 0.3.6 (2022-11-10) \u2693\ufe0e Fix \u2693\ufe0e rufix: resolve pyreverse path and ptw is poetry-only 0.3.5 (2022-11-10) \u2693\ufe0e Fix \u2693\ufe0e another issue with cz bump\u2026 0.3.4 (2022-11-10) \u2693\ufe0e Fix \u2693\ufe0e resolve issues running play and build_diagrams 0.3.3 (2022-11-10) \u2693\ufe0e Fix \u2693\ufe0e export dev dependencies add private tasks for ptw and pytest Refactor \u2693\ufe0e switch from _priv to just an underscore 0.3.2 (2022-11-10) \u2693\ufe0e Fix \u2693\ufe0e another issue with cz and the lock 0.3.1 (2022-11-10) \u2693\ufe0e Fix \u2693\ufe0e correct improper bump to ptw 0.3.0 (2022-11-10) \u2693\ufe0e Feat \u2693\ufe0e make the python executable configurable add quieter user_task action and merge upgrade task 0.2.3 (2022-11-09) \u2693\ufe0e Fix \u2693\ufe0e undo requirement change from cl_bump 0.2.2 (2022-11-09) \u2693\ufe0e Fix \u2693\ufe0e use file_paths for absolufy-imports and docformatter 0.2.1 (2022-11-09) \u2693\ufe0e Fix \u2693\ufe0e format_all needs to return actions 0.2.0 (2022-11-09) \u2693\ufe0e Feat \u2693\ufe0e remove next_task and add *_all tasks 0.1.1 (2022-11-08) \u2693\ufe0e Feat \u2693\ufe0e doit tooling (#2) initialize with copier Fix \u2693\ufe0e support \u2018game\u2019 instead of community-rpg minor fixes to pass CI locally (#3) Refactor \u2693\ufe0e run prdc post-install","title":"Docs"},{"location":"docs/CHANGELOG/#0311-2022-11-12","text":"","title":"0.3.11 (2022-11-12)"},{"location":"docs/CHANGELOG/#fix","text":"resolve issues and document the hidden tasks","title":"Fix"},{"location":"docs/CHANGELOG/#0310-2022-11-12","text":"","title":"0.3.10 (2022-11-12)"},{"location":"docs/CHANGELOG/#fix_1","text":"check length of errors and not just log file","title":"Fix"},{"location":"docs/CHANGELOG/#039-2022-11-11","text":"","title":"0.3.9 (2022-11-11)"},{"location":"docs/CHANGELOG/#fix_2","text":"add missing lxml dependency","title":"Fix"},{"location":"docs/CHANGELOG/#038-2022-11-10","text":"","title":"0.3.8 (2022-11-10)"},{"location":"docs/CHANGELOG/#fix_3","text":"fix incorrect double underscore in private tasks","title":"Fix"},{"location":"docs/CHANGELOG/#037-2022-11-10","text":"","title":"0.3.7 (2022-11-10)"},{"location":"docs/CHANGELOG/#fix_4","text":"return false to error on check errors","title":"Fix"},{"location":"docs/CHANGELOG/#036-2022-11-10","text":"","title":"0.3.6 (2022-11-10)"},{"location":"docs/CHANGELOG/#fix_5","text":"rufix: resolve pyreverse path and ptw is poetry-only","title":"Fix"},{"location":"docs/CHANGELOG/#035-2022-11-10","text":"","title":"0.3.5 (2022-11-10)"},{"location":"docs/CHANGELOG/#fix_6","text":"another issue with cz bump\u2026","title":"Fix"},{"location":"docs/CHANGELOG/#034-2022-11-10","text":"","title":"0.3.4 (2022-11-10)"},{"location":"docs/CHANGELOG/#fix_7","text":"resolve issues running play and build_diagrams","title":"Fix"},{"location":"docs/CHANGELOG/#033-2022-11-10","text":"","title":"0.3.3 (2022-11-10)"},{"location":"docs/CHANGELOG/#fix_8","text":"export dev dependencies add private tasks for ptw and pytest","title":"Fix"},{"location":"docs/CHANGELOG/#refactor","text":"switch from _priv to just an underscore","title":"Refactor"},{"location":"docs/CHANGELOG/#032-2022-11-10","text":"","title":"0.3.2 (2022-11-10)"},{"location":"docs/CHANGELOG/#fix_9","text":"another issue with cz and the lock","title":"Fix"},{"location":"docs/CHANGELOG/#031-2022-11-10","text":"","title":"0.3.1 (2022-11-10)"},{"location":"docs/CHANGELOG/#fix_10","text":"correct improper bump to ptw","title":"Fix"},{"location":"docs/CHANGELOG/#030-2022-11-10","text":"","title":"0.3.0 (2022-11-10)"},{"location":"docs/CHANGELOG/#feat","text":"make the python executable configurable add quieter user_task action and merge upgrade task","title":"Feat"},{"location":"docs/CHANGELOG/#023-2022-11-09","text":"","title":"0.2.3 (2022-11-09)"},{"location":"docs/CHANGELOG/#fix_11","text":"undo requirement change from cl_bump","title":"Fix"},{"location":"docs/CHANGELOG/#022-2022-11-09","text":"","title":"0.2.2 (2022-11-09)"},{"location":"docs/CHANGELOG/#fix_12","text":"use file_paths for absolufy-imports and docformatter","title":"Fix"},{"location":"docs/CHANGELOG/#021-2022-11-09","text":"","title":"0.2.1 (2022-11-09)"},{"location":"docs/CHANGELOG/#fix_13","text":"format_all needs to return actions","title":"Fix"},{"location":"docs/CHANGELOG/#020-2022-11-09","text":"","title":"0.2.0 (2022-11-09)"},{"location":"docs/CHANGELOG/#feat_1","text":"remove next_task and add *_all tasks","title":"Feat"},{"location":"docs/CHANGELOG/#011-2022-11-08","text":"","title":"0.1.1 (2022-11-08)"},{"location":"docs/CHANGELOG/#feat_2","text":"doit tooling (#2) initialize with copier","title":"Feat"},{"location":"docs/CHANGELOG/#fix_14","text":"support \u2018game\u2019 instead of community-rpg minor fixes to pass CI locally (#3)","title":"Fix"},{"location":"docs/CHANGELOG/#refactor_1","text":"run prdc post-install","title":"Refactor"},{"location":"docs/CODE_TAG_SUMMARY/","text":"Task Summary \u2693\ufe0e Auto-Generated by calcipy Type Comment Last Edit Source File FIXME Needs to support mkdocs: https://github.com/executablebooks/mdformat/issues/317 2022-10-14 .pre-commit-config.yaml:48 TODO I don\u2019t know if these work 2022-10-25 .pylintrc:15 PLANNED Continue to exclude noisy errors 2022-10-25 .pylintrc:30 HACK Assumes pft is last line in pyproject.toml, but could do an actual find+replace 2022-10-28 Makefile:18 TBD would be nice to have a single source of truth (i.e. SQLite tables?) but easy to reason about or use an alternative 2022-10-25 docs/diagrams/mvp-wip.md:7 TODO Still investigating how to best utilize these call graphs: https://github.com/vitsalis/PyCG#examples 2022-10-20 pattern_feedback_tool/graphics.py:71 PLANNED Move to a file that handles console output? 2022-10-28 pattern_feedback_tool/lint_parsers.py:81 FIXME Replace with programmatic imports? Maybe explicit imports to check backward compatibility of public API? 2022-10-14 scripts/check_imports.py:7 TODO Replace with imports to test 2022-10-14 scripts/check_imports.py:14 FIXME Stub Console to write a proper test. See link for examples 2022-10-28 tests/test_lint_parsers.py:60 Found code tags for FIXME (3), TODO (3), PLANNED (2), HACK (1), TBD (1)","title":"Task Summary"},{"location":"docs/CODE_TAG_SUMMARY/#task-summary","text":"Auto-Generated by calcipy Type Comment Last Edit Source File FIXME Needs to support mkdocs: https://github.com/executablebooks/mdformat/issues/317 2022-10-14 .pre-commit-config.yaml:48 TODO I don\u2019t know if these work 2022-10-25 .pylintrc:15 PLANNED Continue to exclude noisy errors 2022-10-25 .pylintrc:30 HACK Assumes pft is last line in pyproject.toml, but could do an actual find+replace 2022-10-28 Makefile:18 TBD would be nice to have a single source of truth (i.e. SQLite tables?) but easy to reason about or use an alternative 2022-10-25 docs/diagrams/mvp-wip.md:7 TODO Still investigating how to best utilize these call graphs: https://github.com/vitsalis/PyCG#examples 2022-10-20 pattern_feedback_tool/graphics.py:71 PLANNED Move to a file that handles console output? 2022-10-28 pattern_feedback_tool/lint_parsers.py:81 FIXME Replace with programmatic imports? Maybe explicit imports to check backward compatibility of public API? 2022-10-14 scripts/check_imports.py:7 TODO Replace with imports to test 2022-10-14 scripts/check_imports.py:14 FIXME Stub Console to write a proper test. See link for examples 2022-10-28 tests/test_lint_parsers.py:60 Found code tags for FIXME (3), TODO (3), PLANNED (2), HACK (1), TBD (1)","title":"Task Summary"},{"location":"docs/DEVELOPER_GUIDE/","text":"Developer Notes \u2693\ufe0e Local Development \u2693\ufe0e git clone https://github.com/DesignPatternsAdventure/pattern_feedback_tool.git cd pattern_feedback_tool poetry install # See the available tasks poetry run doit list # Run the default task list (lint, auto-format, test coverage, etc.) poetry run doit --continue # Make code changes and run specific tasks as needed: poetry run doit run test Publishing \u2693\ufe0e For testing, create an account on TestPyPi . Replace ... with the API token generated on TestPyPi or PyPi respectively poetry config repositories.testpypi https://test.pypi.org/legacy/ poetry config pypi-token.testpypi ... poetry run doit run publish_test_pypi # If you didn't configure a token, you will need to provide your username and password to publish To publish to the real PyPi poetry config pypi-token.pypi ... poetry run doit run publish # For a full release, triple check the default tasks, increment the version, rebuild documentation (twice), and publish! poetry run doit run --continue poetry run doit run cl_bump lock document deploy_docs publish # For pre-releases use cl_bump_pre poetry run doit run cl_bump_pre -p rc poetry run doit run lock document deploy_docs publish Current Status \u2693\ufe0e File Statements Missing Excluded Coverage pattern_feedback_tool/__init__.py 5 0 0 100.0% pattern_feedback_tool/doit_tasks.py 125 16 0 87.2% pattern_feedback_tool/graphics.py 15 0 0 100.0% pattern_feedback_tool/lint_parsers.py 64 0 0 100.0% pattern_feedback_tool/linters.py 17 1 0 94.1% pattern_feedback_tool/settings.py 28 2 0 92.9% Totals 254 19 0 92.5% Generated on: 2022-11-11","title":"Developer Notes"},{"location":"docs/DEVELOPER_GUIDE/#developer-notes","text":"","title":"Developer Notes"},{"location":"docs/DEVELOPER_GUIDE/#local-development","text":"git clone https://github.com/DesignPatternsAdventure/pattern_feedback_tool.git cd pattern_feedback_tool poetry install # See the available tasks poetry run doit list # Run the default task list (lint, auto-format, test coverage, etc.) poetry run doit --continue # Make code changes and run specific tasks as needed: poetry run doit run test","title":"Local Development"},{"location":"docs/DEVELOPER_GUIDE/#publishing","text":"For testing, create an account on TestPyPi . Replace ... with the API token generated on TestPyPi or PyPi respectively poetry config repositories.testpypi https://test.pypi.org/legacy/ poetry config pypi-token.testpypi ... poetry run doit run publish_test_pypi # If you didn't configure a token, you will need to provide your username and password to publish To publish to the real PyPi poetry config pypi-token.pypi ... poetry run doit run publish # For a full release, triple check the default tasks, increment the version, rebuild documentation (twice), and publish! poetry run doit run --continue poetry run doit run cl_bump lock document deploy_docs publish # For pre-releases use cl_bump_pre poetry run doit run cl_bump_pre -p rc poetry run doit run lock document deploy_docs publish","title":"Publishing"},{"location":"docs/DEVELOPER_GUIDE/#current-status","text":"File Statements Missing Excluded Coverage pattern_feedback_tool/__init__.py 5 0 0 100.0% pattern_feedback_tool/doit_tasks.py 125 16 0 87.2% pattern_feedback_tool/graphics.py 15 0 0 100.0% pattern_feedback_tool/lint_parsers.py 64 0 0 100.0% pattern_feedback_tool/linters.py 17 1 0 94.1% pattern_feedback_tool/settings.py 28 2 0 92.9% Totals 254 19 0 92.5% Generated on: 2022-11-11","title":"Current Status"},{"location":"docs/STYLE_GUIDE/","text":"Personal Style Guides \u2693\ufe0e Git \u2693\ufe0e We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver . For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below. Commitizen Types and Scopes \u2693\ufe0e type(scope): description Types fix : A bug fix feat : A new feature docs : Documentation-only changes (code comments, separate docs) style : Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons) perf : A code change that improves performance refactor : A change to production code that is not a fix , feat , or perf test : Adding missing or correcting existing tests build : Changes that affect the build system or external dependencies ci : Changes to our CI configuration files and scripts A ! can be used to indicate a breaking change ( refactor!: drop support for Node 6 ) SemVer Rules Based on commit type, the version will be auto-incremented: fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR Scopes A Class, File name, Issue Number, other appropriate noun. As examples: build(poetry): bump requests to v3 or style(#32): add missing type annotations Tips What if a commit fits multiple types? Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes Use git rebase -i to fix commit names prior to merging if incorrect types/scopes are used Git Description Guidelines \u2693\ufe0e Commit message guidelines Full sentence with verb ( lowercase ) and concise description. Below are modified examples for Conventional Commits fix(roles): bug in admin role permissions feat(ui): implement new button design build(pip): upgrade package to remove vulnerabilities refactor: file structure to improve code readability perf(cli): rewrite methods feat(api): endpoints to implement new customer dashboard How to write a good commit message A diff will tell you what changed, but only the commit message can properly tell you why. Keep in mind: This has all been said before . From the seven rules of a great Git commit message: Try for 50 characters, but consider 72 the hard limit Use the body to explain what and why vs. how Issue Labels and Milestones \u2693\ufe0e Personal Guide For Issue Labels, see labels.yml Milestones Current Tasks : main milestone ( name could change based on a specific project, sprint, or month ) Next Tasks Blue Sky Research [Sane Github Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each \u201cit is much more helpful to see the status and type of all issues at a glance.\u201d One of each: Status: \u2026 Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed Type: \u2026 Bug, Maintenance, Question, Enhancement Priority: \u2026 Critical, High, Medium, Low [Britecharts](https://britecharts.github.io/britecharts/github-labels.html) Status: \u2026 On Review \u2013 Request that we are pondering if including or not Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed Needs Design \u2013 Feature that needs a design Ready to Go \u2013 Issue that has been defined and is ready to get started with In Progress \u2013 Issue that is being worked on right now. Completed \u2013 Finished feature or fix Type: \u2026 Bug \u2013 An unexpected problem or unintended behavior Feature \u2013 A new feature request Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements Documentation \u2013 A documentation improvement task Question \u2013 An issue or PR that needs more information or a user question Not Included Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming [Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html) Milestone Overview What are we doing right now? What aren\u2019t we doing right now? 2a. Stuff we\u2019ll probably do soon 2b. Stuff we probably won\u2019t do soon What aren\u2019t we sure about? Milestone Descriptions Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration. Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone. We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone. Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored. What aren\u2019t we sure about?: issues with no milestone. Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets \u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d External Links \u2693\ufe0e TODO: Revisit Git: The Simple Guide Commit Messages and why use the present tense Github\u2019s Advice on Github Most Comprehensive Guide Git Pro Book (free) Bash Tab-Completion Snippet Python \u2693\ufe0e TODO: Revisit Python Style Guides https://gist.github.com/sloria/7001839 http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/ https://innoq.github.io/cards42org_en/ https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide https://www.python.org/doc/humor/ https://docs.python-guide.org/writing/reading/ https://realpython.com/python-refactoring/ ADRs \u2693\ufe0e TODO: Revisit Examples https://github.com/pawamoy/mkdocstrings/issues/28 <\u2013 Links \u2013>","title":"Personal Style Guides"},{"location":"docs/STYLE_GUIDE/#personal-style-guides","text":"","title":"Personal Style Guides"},{"location":"docs/STYLE_GUIDE/#git","text":"We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver . For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below.","title":"Git"},{"location":"docs/STYLE_GUIDE/#commitizen-types-and-scopes","text":"type(scope): description Types fix : A bug fix feat : A new feature docs : Documentation-only changes (code comments, separate docs) style : Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons) perf : A code change that improves performance refactor : A change to production code that is not a fix , feat , or perf test : Adding missing or correcting existing tests build : Changes that affect the build system or external dependencies ci : Changes to our CI configuration files and scripts A ! can be used to indicate a breaking change ( refactor!: drop support for Node 6 ) SemVer Rules Based on commit type, the version will be auto-incremented: fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR Scopes A Class, File name, Issue Number, other appropriate noun. As examples: build(poetry): bump requests to v3 or style(#32): add missing type annotations Tips What if a commit fits multiple types? Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes Use git rebase -i to fix commit names prior to merging if incorrect types/scopes are used","title":"Commitizen Types and Scopes"},{"location":"docs/STYLE_GUIDE/#git-description-guidelines","text":"Commit message guidelines Full sentence with verb ( lowercase ) and concise description. Below are modified examples for Conventional Commits fix(roles): bug in admin role permissions feat(ui): implement new button design build(pip): upgrade package to remove vulnerabilities refactor: file structure to improve code readability perf(cli): rewrite methods feat(api): endpoints to implement new customer dashboard How to write a good commit message A diff will tell you what changed, but only the commit message can properly tell you why. Keep in mind: This has all been said before . From the seven rules of a great Git commit message: Try for 50 characters, but consider 72 the hard limit Use the body to explain what and why vs. how","title":"Git Description Guidelines"},{"location":"docs/STYLE_GUIDE/#issue-labels-and-milestones","text":"Personal Guide For Issue Labels, see labels.yml Milestones Current Tasks : main milestone ( name could change based on a specific project, sprint, or month ) Next Tasks Blue Sky Research [Sane Github Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each \u201cit is much more helpful to see the status and type of all issues at a glance.\u201d One of each: Status: \u2026 Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed Type: \u2026 Bug, Maintenance, Question, Enhancement Priority: \u2026 Critical, High, Medium, Low [Britecharts](https://britecharts.github.io/britecharts/github-labels.html) Status: \u2026 On Review \u2013 Request that we are pondering if including or not Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed Needs Design \u2013 Feature that needs a design Ready to Go \u2013 Issue that has been defined and is ready to get started with In Progress \u2013 Issue that is being worked on right now. Completed \u2013 Finished feature or fix Type: \u2026 Bug \u2013 An unexpected problem or unintended behavior Feature \u2013 A new feature request Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements Documentation \u2013 A documentation improvement task Question \u2013 An issue or PR that needs more information or a user question Not Included Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming [Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html) Milestone Overview What are we doing right now? What aren\u2019t we doing right now? 2a. Stuff we\u2019ll probably do soon 2b. Stuff we probably won\u2019t do soon What aren\u2019t we sure about? Milestone Descriptions Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration. Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone. We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone. Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored. What aren\u2019t we sure about?: issues with no milestone. Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets \u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d","title":"Issue Labels and Milestones"},{"location":"docs/STYLE_GUIDE/#external-links","text":"TODO: Revisit Git: The Simple Guide Commit Messages and why use the present tense Github\u2019s Advice on Github Most Comprehensive Guide Git Pro Book (free) Bash Tab-Completion Snippet","title":"External Links"},{"location":"docs/STYLE_GUIDE/#python","text":"TODO: Revisit Python Style Guides https://gist.github.com/sloria/7001839 http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/ https://innoq.github.io/cards42org_en/ https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide https://www.python.org/doc/humor/ https://docs.python-guide.org/writing/reading/ https://realpython.com/python-refactoring/","title":"Python"},{"location":"docs/STYLE_GUIDE/#adrs","text":"TODO: Revisit Examples https://github.com/pawamoy/mkdocstrings/issues/28 <\u2013 Links \u2013>","title":"ADRs"},{"location":"modules/pattern_feedback_tool/_code_diagrams/","text":"Code Diagrams \u2693\ufe0e Auto-generated with pylint-pyreverse Packages \u2693\ufe0e Full Size Classes \u2693\ufe0e Full Size","title":"Pattern feedback tool"},{"location":"modules/pattern_feedback_tool/_code_diagrams/#code-diagrams","text":"Auto-generated with pylint-pyreverse","title":"Code Diagrams"},{"location":"modules/pattern_feedback_tool/_code_diagrams/#packages","text":"Full Size","title":"Packages"},{"location":"modules/pattern_feedback_tool/_code_diagrams/#classes","text":"Full Size","title":"Classes"},{"location":"reference/SUMMARY/","text":"pattern_feedback_tool * doit_tasks * graphics * lint_parsers * linters * settings","title":"SUMMARY"},{"location":"reference/pattern_feedback_tool/","text":"pattern_feedback_tool.","title":"pattern_feedback_tool"},{"location":"reference/pattern_feedback_tool/doit_tasks/","text":"DoIt tasks. Attributes \u2693\ufe0e DOIT_CONFIG module-attribute \u2693\ufe0e DOIT_CONFIG = { 'action_string_formatting' : 'old' , 'default_tasks' : TASKS_PTW , 'reporter' : SummaryReporter } doit Configuration Settings. Run with poetry run doit . TASKS_PTW module-attribute \u2693\ufe0e TASKS_PTW = [ 'format' , 'test' , 'check' , 'build_diagrams' ] Full suite of tasks for local development. __all__ module-attribute \u2693\ufe0e __all__ = [ 'DOIT_CONFIG' ] + [ fn for fn in locals () if fn . startswith ( 'task_' )] Support star-import. Functions \u2693\ufe0e run_mod cached \u2693\ufe0e run_mod () Return the currently active Python. Source code in pattern_feedback_tool/doit_tasks.py @lru_cache ( maxsize = 1 ) def run_mod () -> str : \"\"\"Return the currently active Python.\"\"\" return f ' { sys . executable } -m' smart_exec cached \u2693\ufe0e smart_exec ( executable ) Assumes executable is in the same directory as Python. Source code in pattern_feedback_tool/doit_tasks.py @lru_cache ( maxsize = 1 ) def smart_exec ( executable : str ) -> str : \"\"\"Assumes executable is in the same directory as Python.\"\"\" return str ( Path ( sys . executable ) . parent / executable ) task__build_diagrams \u2693\ufe0e task__build_diagrams () Create shareable code diagrams for the entire game folder. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task__build_diagrams () -> DoitTask : \"\"\"Create shareable code diagrams for the entire game folder. Returns: DoitTask: doit task \"\"\" package = 'game' diagrams_dir = Path ( package ) / 'diagrams' return __build_diagrams ( package , diagrams_dir ) task__check \u2693\ufe0e task__check () Format all project code and not just the tasks. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task__check () -> DoitTask : \"\"\"Format all project code and not just the tasks. Returns: DoitTask: doit task \"\"\" paths = 'tests game ./dodo.py' return debug_task ( _lint_python ( paths )) task__check_types \u2693\ufe0e task__check_types () Run type annotation checks with MyPy against the entire package. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task__check_types () -> DoitTask : \"\"\"Run type annotation checks with MyPy against the entire package. Returns: DoitTask: doit task \"\"\" return debug_task ([ Interactive ( f ' { run_mod () } mypy game { SETTINGS . ARGS_MYPY } ' ), ]) task__format \u2693\ufe0e task__format () Format all project code and not just the tasks. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task__format () -> DoitTask : \"\"\"Format all project code and not just the tasks. Returns: DoitTask: doit task \"\"\" paths = 'tests game ./dodo.py' cwd = Path . cwd () tracked_files = [ * ( cwd / 'game' ) . rglob ( '*.py' )] + [ * ( cwd / 'tests' ) . rglob ( '*.py' )] + [ cwd / 'dodo.py' ] file_paths = ' ' . join ([ f '\" { pth . relative_to ( cwd ) . as_posix () } \"' for pth in tracked_files ]) docfmt_args = '--blank --close-quotes-on-newline --in-place --wrap-summaries=120 --wrap-descriptions=120' return debug_task ([ f ' { run_mod () } black { paths } --quiet' , f ' { run_mod () } pyupgrade { file_paths } --py310-plus --keep-runtime-typing --exit-zero' , f ' { run_mod () } unimport { paths } --include-star-import --remove' , f ' { smart_exec ( \"absolufy-imports\" ) } { file_paths } --never' , f ' { run_mod () } isort { paths } ' , f ' { run_mod () } docformatter { file_paths } { docfmt_args } ' , ]) task__test \u2693\ufe0e task__test () Run all tests using Pytest. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task__test () -> DoitTask : \"\"\"Run all tests using Pytest. Returns: DoitTask: doit task \"\"\" return debug_task ([ Interactive ( f ' { run_mod () } pytest tests { SETTINGS . ARGS_PYTEST } ' ), ]) task__update \u2693\ufe0e task__update () Run update operations and update the requirements file. RETURNS DESCRIPTION DoitTask DoIt task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task__update () -> DoitTask : \"\"\"Run update operations and update the requirements file. Returns: DoitTask: DoIt task \"\"\" return debug_task ( [ Interactive ( 'poetry lock --no-update' ), Interactive ( 'poetry export --format=requirements.txt --output=requirements.txt --without-hashes --with=dev' , ), ], ) task__watch_changes \u2693\ufe0e task__watch_changes () Re-run tests on changes with pytest watcher. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task__watch_changes () -> DoitTask : \"\"\"Re-run tests on changes with pytest watcher. Returns: DoitTask: doit task \"\"\" return _build_ptw ( '' ) task_build_diagrams \u2693\ufe0e task_build_diagrams () Create shareable code diagrams. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task_build_diagrams () -> DoitTask : \"\"\"Create shareable code diagrams. Returns: DoitTask: doit task \"\"\" task_dir = SETTINGS . task_dir () package = task_dir . as_posix () . replace ( '/' , '.' ) diagrams_dir = task_dir / 'diagrams' return __build_diagrams ( package , diagrams_dir ) task_check \u2693\ufe0e task_check () Run code quality checks. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task_check () -> DoitTask : \"\"\"Run code quality checks. Returns: DoitTask: doit task \"\"\" task_dir = SETTINGS . task_dir () . as_posix () return user_task ( _lint_python ( task_dir )) task_check_types \u2693\ufe0e task_check_types () Run type annotation checks with MyPy. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task_check_types () -> DoitTask : \"\"\"Run type annotation checks with MyPy. Returns: DoitTask: doit task \"\"\" task_dir = SETTINGS . task_dir () . as_posix () return user_task ([ Interactive ( f ' { run_mod () } mypy { task_dir } { SETTINGS . ARGS_MYPY } ' ), ]) task_format \u2693\ufe0e task_format () Format code with black and isort. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task_format () -> DoitTask : \"\"\"Format code with black and isort. Returns: DoitTask: doit task \"\"\" task_dir = SETTINGS . task_dir () . as_posix () return user_task ([ Interactive ( f ' { run_mod () } black \" { task_dir } \"' ), Interactive ( f ' { run_mod () } unimport \" { task_dir } \" --remove' ), Interactive ( f ' { run_mod () } isort \" { task_dir } \"' ), ]) task_play \u2693\ufe0e task_play () Launch and play the game! RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task_play () -> DoitTask : \"\"\"Launch and play the game! Returns: DoitTask: doit task \"\"\" return user_task ([ Interactive ( f ' { run_mod () } game.play' ), ]) task_test \u2693\ufe0e task_test () Run all tests marked with \u2018tasks\u2019 using Pytest. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task_test () -> DoitTask : \"\"\"Run all tests marked with 'tasks' using Pytest. Returns: DoitTask: doit task \"\"\" pytest_args = '--disable-warnings -m tasks' return user_task ([ Interactive ( f ' { run_mod () } pytest tests { pytest_args } { SETTINGS . ARGS_PYTEST } ' ), ]) task_watch_changes \u2693\ufe0e task_watch_changes () Re-run tests tagged with tasks on changes with pytest watcher. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task_watch_changes () -> DoitTask : \"\"\"Re-run tests tagged with tasks on changes with pytest watcher. Returns: DoitTask: doit task \"\"\" return _build_ptw ( '--disable-warnings -m tasks' ) user_task \u2693\ufe0e user_task ( actions , verbosity = 2 ) Show reduced output for user-facing commands. PARAMETER DESCRIPTION actions list of doit actions TYPE: Iterable [ DoitAction ] verbosity 2 is maximum, while 0 is deactivated. Default is 2 TYPE: int DEFAULT: 2 RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def user_task ( actions : Iterable [ DoitAction ], verbosity : int = 2 ) -> DoitTask : \"\"\"Show reduced output for user-facing commands. Args: actions: list of doit actions verbosity: 2 is maximum, while 0 is deactivated. Default is 2 Returns: DoitTask: doit task \"\"\" task : DoitTask = defaultdict ( list ) task [ 'actions' ] = actions task [ 'title' ] = lambda _task : '' task [ 'verbosity' ] = verbosity return task","title":"doit_tasks"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks-attributes","text":"","title":"Attributes"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.DOIT_CONFIG","text":"DOIT_CONFIG = { 'action_string_formatting' : 'old' , 'default_tasks' : TASKS_PTW , 'reporter' : SummaryReporter } doit Configuration Settings. Run with poetry run doit .","title":"DOIT_CONFIG"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.TASKS_PTW","text":"TASKS_PTW = [ 'format' , 'test' , 'check' , 'build_diagrams' ] Full suite of tasks for local development.","title":"TASKS_PTW"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.__all__","text":"__all__ = [ 'DOIT_CONFIG' ] + [ fn for fn in locals () if fn . startswith ( 'task_' )] Support star-import.","title":"__all__"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks-functions","text":"","title":"Functions"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.run_mod","text":"run_mod () Return the currently active Python. Source code in pattern_feedback_tool/doit_tasks.py @lru_cache ( maxsize = 1 ) def run_mod () -> str : \"\"\"Return the currently active Python.\"\"\" return f ' { sys . executable } -m'","title":"run_mod()"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.smart_exec","text":"smart_exec ( executable ) Assumes executable is in the same directory as Python. Source code in pattern_feedback_tool/doit_tasks.py @lru_cache ( maxsize = 1 ) def smart_exec ( executable : str ) -> str : \"\"\"Assumes executable is in the same directory as Python.\"\"\" return str ( Path ( sys . executable ) . parent / executable )","title":"smart_exec()"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.task__build_diagrams","text":"task__build_diagrams () Create shareable code diagrams for the entire game folder. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task__build_diagrams () -> DoitTask : \"\"\"Create shareable code diagrams for the entire game folder. Returns: DoitTask: doit task \"\"\" package = 'game' diagrams_dir = Path ( package ) / 'diagrams' return __build_diagrams ( package , diagrams_dir )","title":"task__build_diagrams()"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.task__check","text":"task__check () Format all project code and not just the tasks. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task__check () -> DoitTask : \"\"\"Format all project code and not just the tasks. Returns: DoitTask: doit task \"\"\" paths = 'tests game ./dodo.py' return debug_task ( _lint_python ( paths ))","title":"task__check()"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.task__check_types","text":"task__check_types () Run type annotation checks with MyPy against the entire package. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task__check_types () -> DoitTask : \"\"\"Run type annotation checks with MyPy against the entire package. Returns: DoitTask: doit task \"\"\" return debug_task ([ Interactive ( f ' { run_mod () } mypy game { SETTINGS . ARGS_MYPY } ' ), ])","title":"task__check_types()"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.task__format","text":"task__format () Format all project code and not just the tasks. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task__format () -> DoitTask : \"\"\"Format all project code and not just the tasks. Returns: DoitTask: doit task \"\"\" paths = 'tests game ./dodo.py' cwd = Path . cwd () tracked_files = [ * ( cwd / 'game' ) . rglob ( '*.py' )] + [ * ( cwd / 'tests' ) . rglob ( '*.py' )] + [ cwd / 'dodo.py' ] file_paths = ' ' . join ([ f '\" { pth . relative_to ( cwd ) . as_posix () } \"' for pth in tracked_files ]) docfmt_args = '--blank --close-quotes-on-newline --in-place --wrap-summaries=120 --wrap-descriptions=120' return debug_task ([ f ' { run_mod () } black { paths } --quiet' , f ' { run_mod () } pyupgrade { file_paths } --py310-plus --keep-runtime-typing --exit-zero' , f ' { run_mod () } unimport { paths } --include-star-import --remove' , f ' { smart_exec ( \"absolufy-imports\" ) } { file_paths } --never' , f ' { run_mod () } isort { paths } ' , f ' { run_mod () } docformatter { file_paths } { docfmt_args } ' , ])","title":"task__format()"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.task__test","text":"task__test () Run all tests using Pytest. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task__test () -> DoitTask : \"\"\"Run all tests using Pytest. Returns: DoitTask: doit task \"\"\" return debug_task ([ Interactive ( f ' { run_mod () } pytest tests { SETTINGS . ARGS_PYTEST } ' ), ])","title":"task__test()"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.task__update","text":"task__update () Run update operations and update the requirements file. RETURNS DESCRIPTION DoitTask DoIt task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task__update () -> DoitTask : \"\"\"Run update operations and update the requirements file. Returns: DoitTask: DoIt task \"\"\" return debug_task ( [ Interactive ( 'poetry lock --no-update' ), Interactive ( 'poetry export --format=requirements.txt --output=requirements.txt --without-hashes --with=dev' , ), ], )","title":"task__update()"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.task__watch_changes","text":"task__watch_changes () Re-run tests on changes with pytest watcher. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task__watch_changes () -> DoitTask : \"\"\"Re-run tests on changes with pytest watcher. Returns: DoitTask: doit task \"\"\" return _build_ptw ( '' )","title":"task__watch_changes()"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.task_build_diagrams","text":"task_build_diagrams () Create shareable code diagrams. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task_build_diagrams () -> DoitTask : \"\"\"Create shareable code diagrams. Returns: DoitTask: doit task \"\"\" task_dir = SETTINGS . task_dir () package = task_dir . as_posix () . replace ( '/' , '.' ) diagrams_dir = task_dir / 'diagrams' return __build_diagrams ( package , diagrams_dir )","title":"task_build_diagrams()"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.task_check","text":"task_check () Run code quality checks. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task_check () -> DoitTask : \"\"\"Run code quality checks. Returns: DoitTask: doit task \"\"\" task_dir = SETTINGS . task_dir () . as_posix () return user_task ( _lint_python ( task_dir ))","title":"task_check()"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.task_check_types","text":"task_check_types () Run type annotation checks with MyPy. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task_check_types () -> DoitTask : \"\"\"Run type annotation checks with MyPy. Returns: DoitTask: doit task \"\"\" task_dir = SETTINGS . task_dir () . as_posix () return user_task ([ Interactive ( f ' { run_mod () } mypy { task_dir } { SETTINGS . ARGS_MYPY } ' ), ])","title":"task_check_types()"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.task_format","text":"task_format () Format code with black and isort. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task_format () -> DoitTask : \"\"\"Format code with black and isort. Returns: DoitTask: doit task \"\"\" task_dir = SETTINGS . task_dir () . as_posix () return user_task ([ Interactive ( f ' { run_mod () } black \" { task_dir } \"' ), Interactive ( f ' { run_mod () } unimport \" { task_dir } \" --remove' ), Interactive ( f ' { run_mod () } isort \" { task_dir } \"' ), ])","title":"task_format()"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.task_play","text":"task_play () Launch and play the game! RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task_play () -> DoitTask : \"\"\"Launch and play the game! Returns: DoitTask: doit task \"\"\" return user_task ([ Interactive ( f ' { run_mod () } game.play' ), ])","title":"task_play()"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.task_test","text":"task_test () Run all tests marked with \u2018tasks\u2019 using Pytest. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task_test () -> DoitTask : \"\"\"Run all tests marked with 'tasks' using Pytest. Returns: DoitTask: doit task \"\"\" pytest_args = '--disable-warnings -m tasks' return user_task ([ Interactive ( f ' { run_mod () } pytest tests { pytest_args } { SETTINGS . ARGS_PYTEST } ' ), ])","title":"task_test()"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.task_watch_changes","text":"task_watch_changes () Re-run tests tagged with tasks on changes with pytest watcher. RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def task_watch_changes () -> DoitTask : \"\"\"Re-run tests tagged with tasks on changes with pytest watcher. Returns: DoitTask: doit task \"\"\" return _build_ptw ( '--disable-warnings -m tasks' )","title":"task_watch_changes()"},{"location":"reference/pattern_feedback_tool/doit_tasks/#pattern_feedback_tool.doit_tasks.user_task","text":"user_task ( actions , verbosity = 2 ) Show reduced output for user-facing commands. PARAMETER DESCRIPTION actions list of doit actions TYPE: Iterable [ DoitAction ] verbosity 2 is maximum, while 0 is deactivated. Default is 2 TYPE: int DEFAULT: 2 RETURNS DESCRIPTION DoitTask doit task TYPE: DoitTask Source code in pattern_feedback_tool/doit_tasks.py @beartype def user_task ( actions : Iterable [ DoitAction ], verbosity : int = 2 ) -> DoitTask : \"\"\"Show reduced output for user-facing commands. Args: actions: list of doit actions verbosity: 2 is maximum, while 0 is deactivated. Default is 2 Returns: DoitTask: doit task \"\"\" task : DoitTask = defaultdict ( list ) task [ 'actions' ] = actions task [ 'title' ] = lambda _task : '' task [ 'verbosity' ] = verbosity return task","title":"user_task()"},{"location":"reference/pattern_feedback_tool/graphics/","text":"Graphic Output Tools. Functions \u2693\ufe0e run_code2flow \u2693\ufe0e run_code2flow ( arg_path , output_image , ** kwargs ) Run code2flow to generate a call graph. Based on: https://github.com/scottrogowski/code2flow/blob/7cfc8204bcbff39d1f3e8e5359a97ed1ffe1aeca/code2flow/engine.py#L860-L875 PARAMETER DESCRIPTION arg_path \u201cDirectory containing source files to analyze, or multiple file paths\u201d TYPE: Path output_image Image file to create (SVG, PNG, etc.) TYPE: Path **kwargs additional keyword arguments TYPE: dict DEFAULT: {} Source code in pattern_feedback_tool/graphics.py @beartype def run_code2flow ( arg_path : Path , output_image : Path , ** kwargs : dict , # type: ignore[type-arg] ) -> None : \"\"\"Run code2flow to generate a call graph. - Based on: https://github.com/scottrogowski/code2flow/blob/7cfc8204bcbff39d1f3e8e5359a97ed1ffe1aeca/code2flow/engine.py#L860-L875 Args: arg_path: \"Directory containing source files to analyze, or multiple file paths\" output_image: Image file to create (SVG, PNG, etc.) **kwargs: additional keyword arguments \"\"\" code2flow ( raw_source_paths = [ arg_path ], output_file = output_image . as_posix (), ** kwargs ) run_pycg \u2693\ufe0e run_pycg ( arg_path , package = None , max_iter =- 1 , ** kwargs ) Run pycg to generate a call graph. Based on: https://github.com/vitsalis/PyCG/blob/99c991e585615263f36fae5849df9c2daa684021/pycg/ main .py#L75-L89 PARAMETER DESCRIPTION arg_path \u201cDirectory containing source files to analyze, or multiple file paths\u201d TYPE: Path package optional package name. Default is None TYPE: str | None DEFAULT: None max_iter integer iterations. Default is -1 to defer to pycg TYPE: int DEFAULT: -1 **kwargs additional keyword arguments TYPE: dict DEFAULT: {} RETURNS DESCRIPTION dict call graph TYPE: dict Source code in pattern_feedback_tool/graphics.py @beartype def run_pycg ( arg_path : Path , package : str | None = None , max_iter : int = - 1 , ** kwargs : dict , # type: ignore[type-arg] ) -> dict : # type: ignore[type-arg] \"\"\"Run pycg to generate a call graph. - Based on: https://github.com/vitsalis/PyCG/blob/99c991e585615263f36fae5849df9c2daa684021/pycg/__main__.py#L75-L89 Args: arg_path: \"Directory containing source files to analyze, or multiple file paths\" package: optional package name. Default is None max_iter: integer iterations. Default is -1 to defer to pycg **kwargs: additional keyword arguments Returns: dict: call graph \"\"\" cg = CallGraphGenerator ([ arg_path ], package = package , max_iter = max_iter , operation = CALL_GRAPH_OP , ** kwargs ) cg . analyze () formatter = formats . Simple ( cg ) # FASTEN format is probably easier to parse, but Simple is more human readable # formatter = formats.Fasten(cg, package=package, product=\"\", forge=\"\", version=\"\", timestamp=0) return formatter . generate () # type: ignore[no-any-return]","title":"graphics"},{"location":"reference/pattern_feedback_tool/graphics/#pattern_feedback_tool.graphics-functions","text":"","title":"Functions"},{"location":"reference/pattern_feedback_tool/graphics/#pattern_feedback_tool.graphics.run_code2flow","text":"run_code2flow ( arg_path , output_image , ** kwargs ) Run code2flow to generate a call graph. Based on: https://github.com/scottrogowski/code2flow/blob/7cfc8204bcbff39d1f3e8e5359a97ed1ffe1aeca/code2flow/engine.py#L860-L875 PARAMETER DESCRIPTION arg_path \u201cDirectory containing source files to analyze, or multiple file paths\u201d TYPE: Path output_image Image file to create (SVG, PNG, etc.) TYPE: Path **kwargs additional keyword arguments TYPE: dict DEFAULT: {} Source code in pattern_feedback_tool/graphics.py @beartype def run_code2flow ( arg_path : Path , output_image : Path , ** kwargs : dict , # type: ignore[type-arg] ) -> None : \"\"\"Run code2flow to generate a call graph. - Based on: https://github.com/scottrogowski/code2flow/blob/7cfc8204bcbff39d1f3e8e5359a97ed1ffe1aeca/code2flow/engine.py#L860-L875 Args: arg_path: \"Directory containing source files to analyze, or multiple file paths\" output_image: Image file to create (SVG, PNG, etc.) **kwargs: additional keyword arguments \"\"\" code2flow ( raw_source_paths = [ arg_path ], output_file = output_image . as_posix (), ** kwargs )","title":"run_code2flow()"},{"location":"reference/pattern_feedback_tool/graphics/#pattern_feedback_tool.graphics.run_pycg","text":"run_pycg ( arg_path , package = None , max_iter =- 1 , ** kwargs ) Run pycg to generate a call graph. Based on: https://github.com/vitsalis/PyCG/blob/99c991e585615263f36fae5849df9c2daa684021/pycg/ main .py#L75-L89 PARAMETER DESCRIPTION arg_path \u201cDirectory containing source files to analyze, or multiple file paths\u201d TYPE: Path package optional package name. Default is None TYPE: str | None DEFAULT: None max_iter integer iterations. Default is -1 to defer to pycg TYPE: int DEFAULT: -1 **kwargs additional keyword arguments TYPE: dict DEFAULT: {} RETURNS DESCRIPTION dict call graph TYPE: dict Source code in pattern_feedback_tool/graphics.py @beartype def run_pycg ( arg_path : Path , package : str | None = None , max_iter : int = - 1 , ** kwargs : dict , # type: ignore[type-arg] ) -> dict : # type: ignore[type-arg] \"\"\"Run pycg to generate a call graph. - Based on: https://github.com/vitsalis/PyCG/blob/99c991e585615263f36fae5849df9c2daa684021/pycg/__main__.py#L75-L89 Args: arg_path: \"Directory containing source files to analyze, or multiple file paths\" package: optional package name. Default is None max_iter: integer iterations. Default is -1 to defer to pycg **kwargs: additional keyword arguments Returns: dict: call graph \"\"\" cg = CallGraphGenerator ([ arg_path ], package = package , max_iter = max_iter , operation = CALL_GRAPH_OP , ** kwargs ) cg . analyze () formatter = formats . Simple ( cg ) # FASTEN format is probably easier to parse, but Simple is more human readable # formatter = formats.Fasten(cg, package=package, product=\"\", forge=\"\", version=\"\", timestamp=0) return formatter . generate () # type: ignore[no-any-return]","title":"run_pycg()"},{"location":"reference/pattern_feedback_tool/lint_parsers/","text":"Parsers for lint module output. Classes \u2693\ufe0e LintLog \u2693\ufe0e Bases: BaseModel Source code in pattern_feedback_tool/lint_parsers.py class LintLog ( BaseModel ): source : Linter message : str message_id : str kind : str | None = None file_path : str line : str column : str end_line : str | None = None end_column : str | None = None obj : str | None = None @classmethod @beartype def from_pylint ( cls , ** kwargs ) -> 'LintLog' : # type: ignore [no-untyped-def] \"\"\"Dropped keys: module, symbol.\"\"\" keys = [ 'obj' , 'line' , 'column' , 'message' ] return cls ( source = Linter . PYLINT , message_id = kwargs [ 'message-id' ], kind = kwargs [ 'type' ], file_path = kwargs [ 'path' ], end_line = kwargs [ 'endLine' ], end_column = kwargs [ 'endColumn' ], ** { key : kwargs [ key ] for key in keys }, ) Functions \u2693\ufe0e from_pylint classmethod \u2693\ufe0e from_pylint ( ** kwargs ) Dropped keys: module, symbol. Source code in pattern_feedback_tool/lint_parsers.py @classmethod @beartype def from_pylint ( cls , ** kwargs ) -> 'LintLog' : # type: ignore [no-untyped-def] \"\"\"Dropped keys: module, symbol.\"\"\" keys = [ 'obj' , 'line' , 'column' , 'message' ] return cls ( source = Linter . PYLINT , message_id = kwargs [ 'message-id' ], kind = kwargs [ 'type' ], file_path = kwargs [ 'path' ], end_line = kwargs [ 'endLine' ], end_column = kwargs [ 'endColumn' ], ** { key : kwargs [ key ] for key in keys }, ) Functions \u2693\ufe0e display_lint_logs \u2693\ufe0e display_lint_logs ( console , logs ) Use rich to display an easily readable output from found LintLogs. Source code in pattern_feedback_tool/lint_parsers.py @beartype def display_lint_logs ( console : Console , logs : list [ LintLog ]) -> None : \"\"\"Use rich to display an easily readable output from found LintLogs.\"\"\" table = Table ( show_header = True , header_style = 'bold' ) table . add_column ( 'Source' , style = 'Dim' ) table . add_column ( 'File Path' ) table . add_column ( 'Code' , style = 'Bold' ) table . add_column ( 'Message' ) grouped_logs = defaultdict ( list ) for log in logs : grouped_logs [ log . file_path ] . append ( log ) for pth in sorted ( grouped_logs ): for log in grouped_logs [ pth ]: link = f ' { log . file_path } : { log . line } : { log . column } ' # Follows: https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda#file-uris-and-the-hostname file_uri = f 'file:/ { ( Path . cwd () / link ) . as_posix () } ' table . add_row ( log . source . value , f '[link= { file_uri } ] { link } [/link]' , f '[magenta] { log . message_id } [/]' , f ' { log . message } ( { log . obj } )' if log . obj else log . message , ) console . print ( table ) parse_flake8_logs \u2693\ufe0e parse_flake8_logs ( flake8_logs ) Parse data from flake8 regular text output. Source code in pattern_feedback_tool/lint_parsers.py @beartype def parse_flake8_logs ( flake8_logs : str ) -> list [ LintLog ]: \"\"\"Parse data from flake8 regular text output.\"\"\" logs = [] for raw_line in flake8_logs . split ( ' \\n ' ): if line := raw_line . strip (): logs . append ( _extract_flake8_data ( line )) return logs parse_pylint_json_logs \u2693\ufe0e parse_pylint_json_logs ( pylint_logs ) Parse data from pylint json output. Source code in pattern_feedback_tool/lint_parsers.py @beartype def parse_pylint_json_logs ( pylint_logs : str ) -> list [ LintLog ]: \"\"\"Parse data from pylint json output.\"\"\" return [ LintLog . from_pylint ( ** item ) for item in json . loads ( pylint_logs )]","title":"lint_parsers"},{"location":"reference/pattern_feedback_tool/lint_parsers/#pattern_feedback_tool.lint_parsers-classes","text":"","title":"Classes"},{"location":"reference/pattern_feedback_tool/lint_parsers/#pattern_feedback_tool.lint_parsers.LintLog","text":"Bases: BaseModel Source code in pattern_feedback_tool/lint_parsers.py class LintLog ( BaseModel ): source : Linter message : str message_id : str kind : str | None = None file_path : str line : str column : str end_line : str | None = None end_column : str | None = None obj : str | None = None @classmethod @beartype def from_pylint ( cls , ** kwargs ) -> 'LintLog' : # type: ignore [no-untyped-def] \"\"\"Dropped keys: module, symbol.\"\"\" keys = [ 'obj' , 'line' , 'column' , 'message' ] return cls ( source = Linter . PYLINT , message_id = kwargs [ 'message-id' ], kind = kwargs [ 'type' ], file_path = kwargs [ 'path' ], end_line = kwargs [ 'endLine' ], end_column = kwargs [ 'endColumn' ], ** { key : kwargs [ key ] for key in keys }, )","title":"LintLog"},{"location":"reference/pattern_feedback_tool/lint_parsers/#pattern_feedback_tool.lint_parsers.LintLog-functions","text":"","title":"Functions"},{"location":"reference/pattern_feedback_tool/lint_parsers/#pattern_feedback_tool.lint_parsers.LintLog.from_pylint","text":"from_pylint ( ** kwargs ) Dropped keys: module, symbol. Source code in pattern_feedback_tool/lint_parsers.py @classmethod @beartype def from_pylint ( cls , ** kwargs ) -> 'LintLog' : # type: ignore [no-untyped-def] \"\"\"Dropped keys: module, symbol.\"\"\" keys = [ 'obj' , 'line' , 'column' , 'message' ] return cls ( source = Linter . PYLINT , message_id = kwargs [ 'message-id' ], kind = kwargs [ 'type' ], file_path = kwargs [ 'path' ], end_line = kwargs [ 'endLine' ], end_column = kwargs [ 'endColumn' ], ** { key : kwargs [ key ] for key in keys }, )","title":"from_pylint()"},{"location":"reference/pattern_feedback_tool/lint_parsers/#pattern_feedback_tool.lint_parsers-functions","text":"","title":"Functions"},{"location":"reference/pattern_feedback_tool/lint_parsers/#pattern_feedback_tool.lint_parsers.display_lint_logs","text":"display_lint_logs ( console , logs ) Use rich to display an easily readable output from found LintLogs. Source code in pattern_feedback_tool/lint_parsers.py @beartype def display_lint_logs ( console : Console , logs : list [ LintLog ]) -> None : \"\"\"Use rich to display an easily readable output from found LintLogs.\"\"\" table = Table ( show_header = True , header_style = 'bold' ) table . add_column ( 'Source' , style = 'Dim' ) table . add_column ( 'File Path' ) table . add_column ( 'Code' , style = 'Bold' ) table . add_column ( 'Message' ) grouped_logs = defaultdict ( list ) for log in logs : grouped_logs [ log . file_path ] . append ( log ) for pth in sorted ( grouped_logs ): for log in grouped_logs [ pth ]: link = f ' { log . file_path } : { log . line } : { log . column } ' # Follows: https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda#file-uris-and-the-hostname file_uri = f 'file:/ { ( Path . cwd () / link ) . as_posix () } ' table . add_row ( log . source . value , f '[link= { file_uri } ] { link } [/link]' , f '[magenta] { log . message_id } [/]' , f ' { log . message } ( { log . obj } )' if log . obj else log . message , ) console . print ( table )","title":"display_lint_logs()"},{"location":"reference/pattern_feedback_tool/lint_parsers/#pattern_feedback_tool.lint_parsers.parse_flake8_logs","text":"parse_flake8_logs ( flake8_logs ) Parse data from flake8 regular text output. Source code in pattern_feedback_tool/lint_parsers.py @beartype def parse_flake8_logs ( flake8_logs : str ) -> list [ LintLog ]: \"\"\"Parse data from flake8 regular text output.\"\"\" logs = [] for raw_line in flake8_logs . split ( ' \\n ' ): if line := raw_line . strip (): logs . append ( _extract_flake8_data ( line )) return logs","title":"parse_flake8_logs()"},{"location":"reference/pattern_feedback_tool/lint_parsers/#pattern_feedback_tool.lint_parsers.parse_pylint_json_logs","text":"parse_pylint_json_logs ( pylint_logs ) Parse data from pylint json output. Source code in pattern_feedback_tool/lint_parsers.py @beartype def parse_pylint_json_logs ( pylint_logs : str ) -> list [ LintLog ]: \"\"\"Parse data from pylint json output.\"\"\" return [ LintLog . from_pylint ( ** item ) for item in json . loads ( pylint_logs )]","title":"parse_pylint_json_logs()"},{"location":"reference/pattern_feedback_tool/linters/","text":"Linting Feedback Tools. Functions \u2693\ufe0e run_radon \u2693\ufe0e run_radon ( arg_path , * , min_score = 'A' , radon_harvester = None ) Run radon to check cyclomatic complexity. Based on: https://github.com/rubik/xenon/blob/b63601f6a0aba48150d92913c3522e19e33870f8/xenon/core.py Radon Documentation: https://radon.readthedocs.io/en/latest/intro.html Radon Source Code: https://github.com/rubik/radon/blob/941f8e20bdd8672d39fc395ebe893e43c1619cdf/radon/cli/ init .py PARAMETER DESCRIPTION arg_path \u201cDirectory containing source files to analyze, or multiple file paths\u201d TYPE: Path min_score minimum score to log. Default is \u2018A\u2019 TYPE: Literal ['A', 'B', 'C', 'D', 'E', 'F'] DEFAULT: 'A' radon_harvester Alternatives are HCHarvester, MIHarvester, and RawHarvester. Default is CCHarvester TYPE: _HARV_TYPE | None DEFAULT: None RETURNS DESCRIPTION str markdown-formatted table TYPE: str Source code in pattern_feedback_tool/linters.py @beartype def run_radon ( arg_path : Path , * , min_score : Literal [ 'A' , 'B' , 'C' , 'D' , 'E' , 'F' ] = 'A' , radon_harvester : _HARV_TYPE | None = None , ) -> str : \"\"\"Run radon to check cyclomatic complexity. - Based on: https://github.com/rubik/xenon/blob/b63601f6a0aba48150d92913c3522e19e33870f8/xenon/core.py - Radon Documentation: https://radon.readthedocs.io/en/latest/intro.html - Radon Source Code: https://github.com/rubik/radon/blob/941f8e20bdd8672d39fc395ebe893e43c1619cdf/radon/cli/__init__.py Args: arg_path: \"Directory containing source files to analyze, or multiple file paths\" min_score: minimum score to log. Default is 'A' radon_harvester: Alternatives are HCHarvester, MIHarvester, and RawHarvester. Default is CCHarvester Returns: str: markdown-formatted table \"\"\" harvester : _HARV_TYPE = radon_harvester or CCHarvester config = Config ( exclude = '' , ignore = '' , order = LINES , no_assert = False , show_closures = False , min = min_score , max = 'F' , show_complexity = True , ) return harvester ([ arg_path . as_posix ()], config ) . as_md ()","title":"linters"},{"location":"reference/pattern_feedback_tool/linters/#pattern_feedback_tool.linters-functions","text":"","title":"Functions"},{"location":"reference/pattern_feedback_tool/linters/#pattern_feedback_tool.linters.run_radon","text":"run_radon ( arg_path , * , min_score = 'A' , radon_harvester = None ) Run radon to check cyclomatic complexity. Based on: https://github.com/rubik/xenon/blob/b63601f6a0aba48150d92913c3522e19e33870f8/xenon/core.py Radon Documentation: https://radon.readthedocs.io/en/latest/intro.html Radon Source Code: https://github.com/rubik/radon/blob/941f8e20bdd8672d39fc395ebe893e43c1619cdf/radon/cli/ init .py PARAMETER DESCRIPTION arg_path \u201cDirectory containing source files to analyze, or multiple file paths\u201d TYPE: Path min_score minimum score to log. Default is \u2018A\u2019 TYPE: Literal ['A', 'B', 'C', 'D', 'E', 'F'] DEFAULT: 'A' radon_harvester Alternatives are HCHarvester, MIHarvester, and RawHarvester. Default is CCHarvester TYPE: _HARV_TYPE | None DEFAULT: None RETURNS DESCRIPTION str markdown-formatted table TYPE: str Source code in pattern_feedback_tool/linters.py @beartype def run_radon ( arg_path : Path , * , min_score : Literal [ 'A' , 'B' , 'C' , 'D' , 'E' , 'F' ] = 'A' , radon_harvester : _HARV_TYPE | None = None , ) -> str : \"\"\"Run radon to check cyclomatic complexity. - Based on: https://github.com/rubik/xenon/blob/b63601f6a0aba48150d92913c3522e19e33870f8/xenon/core.py - Radon Documentation: https://radon.readthedocs.io/en/latest/intro.html - Radon Source Code: https://github.com/rubik/radon/blob/941f8e20bdd8672d39fc395ebe893e43c1619cdf/radon/cli/__init__.py Args: arg_path: \"Directory containing source files to analyze, or multiple file paths\" min_score: minimum score to log. Default is 'A' radon_harvester: Alternatives are HCHarvester, MIHarvester, and RawHarvester. Default is CCHarvester Returns: str: markdown-formatted table \"\"\" harvester : _HARV_TYPE = radon_harvester or CCHarvester config = Config ( exclude = '' , ignore = '' , order = LINES , no_assert = False , show_closures = False , min = min_score , max = 'F' , show_complexity = True , ) return harvester ([ arg_path . as_posix ()], config ) . as_md ()","title":"run_radon()"},{"location":"reference/pattern_feedback_tool/settings/","text":"User Settings. Attributes \u2693\ufe0e SETTINGS module-attribute \u2693\ufe0e SETTINGS = _merge_saved_settings ( _Settings ()) Singleton settings object.","title":"settings"},{"location":"reference/pattern_feedback_tool/settings/#pattern_feedback_tool.settings-attributes","text":"","title":"Attributes"},{"location":"reference/pattern_feedback_tool/settings/#pattern_feedback_tool.settings.SETTINGS","text":"SETTINGS = _merge_saved_settings ( _Settings ()) Singleton settings object.","title":"SETTINGS"}]}